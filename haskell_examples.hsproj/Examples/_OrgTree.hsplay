-- Haskell Playground 1.0


sally = Employee {
        employeeName = "sally", 
        employeeReports = [] 
       }

fred = Employee {
        employeeName = "fred", 
        employeeReports = [] 
       }

sam = Employee "sam" []
alex = Employee "alex" []

george = Employee {
        employeeName = "george", 
        employeeReports = [ sam, alex ] 
       }

susan = Employee {
        employeeName = "susan", 
        employeeReports = [] 
       }

joe = Employee {
        employeeName = "joe", 
        employeeReports = [ sally, 
                    fred, 
                    george, 
                    susan ]

       }



:t reports

employeeReports joe

countEmp joe

countEmp george

findEmp "alex" joe

map Just $ employeeReports joe

map Just []

j2 = addEmp4 "hank" "susan" joe

countEmp j2

ceo = Employee "joe" []

foldl addEmp ceo orgList

org = addEmployees ceo orgList

countEmp org

printOrg org

org2 = addEmp4 "hank" "susan" org

printOrg org2

findEmp "hank" org2

:t concat

:info concat

concat [[1,2,3], [1,2,3]] 
:t Just

concat $ Just ["wild", "cat"]

x = [(Just ["wild", "cat"]), (Just ["mad", "dog"])]
map concat x

concat Nothing






